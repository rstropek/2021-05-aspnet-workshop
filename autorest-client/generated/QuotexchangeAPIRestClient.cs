// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using QuotexchangeAPI.Models;

namespace QuotexchangeAPI
{
    internal partial class QuotexchangeAPIRestClient
    {
        private float id;
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of QuotexchangeAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="id"> Unique ID of the quote. </param>
        /// <param name="endpoint"> server parameter. </param>
        public QuotexchangeAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, float id, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://localhost:5001/api");

            this.id = id;
            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateClearRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes/clear", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes all quotes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> ClearAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateClearRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes all quotes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Clear(CancellationToken cancellationToken = default)
        {
            using var message = CreateClearRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMyQuotesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes/my", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all quotes created by the currently signed-in user. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<Quote>>> GetMyQuotesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMyQuotesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Quote> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Quote> array = new List<Quote>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Quote.DeserializeQuote(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all quotes created by the currently signed-in user. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<Quote>> GetMyQuotes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMyQuotesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Quote> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Quote> array = new List<Quote>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Quote.DeserializeQuote(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddQuoteRequest(NewQuote body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Adds a quote. The currently signed-in user is stored as the creator in the DB. </summary>
        /// <param name="body"> The NewQuote to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Quote>> AddQuoteAsync(NewQuote body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateAddQuoteRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Quote value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Quote.DeserializeQuote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                    return Response.FromValue((Quote)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Adds a quote. The currently signed-in user is stored as the creator in the DB. </summary>
        /// <param name="body"> The NewQuote to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Quote> AddQuote(NewQuote body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateAddQuoteRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Quote value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Quote.DeserializeQuote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                    return Response.FromValue((Quote)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetQuotesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets all quotes raked by popularity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<Quote>>> GetQuotesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetQuotesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Quote> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Quote> array = new List<Quote>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Quote.DeserializeQuote(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets all quotes raked by popularity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<Quote>> GetQuotes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetQuotesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Quote> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Quote> array = new List<Quote>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Quote.DeserializeQuote(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetQuoteByIdRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a quote with a given ID. Note that a user can only call this API for quotes that she created. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Quote>> GetQuoteByIdAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetQuoteByIdRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Quote value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Quote.DeserializeQuote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                    return Response.FromValue((Quote)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a quote with a given ID. Note that a user can only call this API for quotes that she created. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Quote> GetQuoteById(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetQuoteByIdRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Quote value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Quote.DeserializeQuote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                    return Response.FromValue((Quote)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateLikeQuoteRequest(Enum0 v)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/quotes/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/vote", false);
            uri.AppendQuery("v", v.ToString(), true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Currently signed-in user wants to like quote. Note that each user can only like a single quote once. If she likes a quote multiple times, subsequent likes are ignored. </summary>
        /// <param name="v"> *up* for *upvote* (=like), *down* for *downvote* (=dislike). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> LikeQuoteAsync(Enum0 v, CancellationToken cancellationToken = default)
        {
            using var message = CreateLikeQuoteRequest(v);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Currently signed-in user wants to like quote. Note that each user can only like a single quote once. If she likes a quote multiple times, subsequent likes are ignored. </summary>
        /// <param name="v"> *up* for *upvote* (=like), *down* for *downvote* (=dislike). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response LikeQuote(Enum0 v, CancellationToken cancellationToken = default)
        {
            using var message = CreateLikeQuoteRequest(v);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
